{
  "ver": "1.0.25",
  "uuid": "92e2b147-3160-475d-a588-968d15d91667",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_FIRETEXTURE\nuniform sampler2D fireTexture;\nuniform sampler2D maskTexture;\nuniform sampler2D moveTexture;\nuniform vec4 startColor;\nuniform vec4 centerColor;\nuniform vec4 endColor;\nuniform float fireThreshold;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  o.r = 1.0;\n  o.g = 0.0;\n  o.b = 0.0;\n  vec4 fire = vec4(1, 1, 1, 1);\n  vec4 _UvDisTile = vec4(1, 1, 1, 1);\n  #if USE_FIRETEXTURE\n    vec2 f_uv0 = v_uv0;\n    f_uv0.y = abs(fract(f_uv0.y + cc_time.x * 0.2));\n    f_uv0.x = f_uv0.x + 0.1* (sin(2.0 * f_uv0.y * 3.1415 + cc_time.x));\n    vec4 fv = texture2D(fireTexture, f_uv0);\n    vec2 m_uv0 = v_uv0;\n    m_uv0.x = abs(fract(m_uv0.x + cc_time.x * 0.1));\n    vec4 mv = texture2D(moveTexture, m_uv0);\n  vec4 maskTexture_tmp = texture2D(maskTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_maskTexture\n      maskTexture_tmp.a *= texture2D(maskTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    fire.rgb *= (maskTexture_tmp.rgb * maskTexture_tmp.rgb);\n    fire.a *= maskTexture_tmp.a;\n  #else\n    fire *= maskTexture_tmp;\n  #endif\n  #endif\n  fv *= 5.0 * fire;\n  mv *= 5.0 * fire;\n  o.a *= fv.r * mv.r * fireThreshold;\n  if(o.a >= 1.0){\n    o.rgb = startColor.rgb;\n    o.a = 1.0;\n  } else if(o.a >= 0.3) {\n    o.rgb = centerColor.rgb;\n    o.a = 1.0;\n  } else if(o.a >= 0.1) {\n    o.rgb = endColor.rgb;\n    o.a = 1.0;\n  } else {\n    o.a = 0.0;\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_FIRETEXTURE\nuniform sampler2D fireTexture;\nuniform sampler2D maskTexture;\nuniform sampler2D moveTexture;\nuniform myUniform{\n  vec4 startColor;\n  vec4 centerColor;\n  vec4 endColor;\n  float fireThreshold;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  o.r = 1.0;\n  o.g = 0.0;\n  o.b = 0.0;\n  vec4 fire = vec4(1, 1, 1, 1);\n  vec4 _UvDisTile = vec4(1, 1, 1, 1);\n  #if USE_FIRETEXTURE\n    vec2 f_uv0 = v_uv0;\n    f_uv0.y = abs(fract(f_uv0.y + cc_time.x * 0.2));\n    f_uv0.x = f_uv0.x + 0.1* (sin(2.0 * f_uv0.y * 3.1415 + cc_time.x));\n    vec4 fv = texture(fireTexture, f_uv0);\n    vec2 m_uv0 = v_uv0;\n    m_uv0.x = abs(fract(m_uv0.x + cc_time.x * 0.1));\n    vec4 mv = texture(moveTexture, m_uv0);\n  vec4 maskTexture_tmp = texture(maskTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_maskTexture\n      maskTexture_tmp.a *= texture(maskTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    fire.rgb *= (maskTexture_tmp.rgb * maskTexture_tmp.rgb);\n    fire.a *= maskTexture_tmp.a;\n  #else\n    fire *= maskTexture_tmp;\n  #endif\n  #endif\n  fv *= 5.0 * fire;\n  mv *= 5.0 * fire;\n  o.a *= fv.r * mv.r * fireThreshold;\n  if(o.a >= 1.0){\n    o.rgb = startColor.rgb;\n    o.a = 1.0;\n  } else if(o.a >= 0.3) {\n    o.rgb = centerColor.rgb;\n    o.a = 1.0;\n  } else if(o.a >= 0.1) {\n    o.rgb = endColor.rgb;\n    o.a = 1.0;\n  } else {\n    o.a = 0.0;\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}