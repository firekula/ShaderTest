{
  "ver": "1.0.25",
  "uuid": "a4eb9085-a2a4-47e8-ba41-68196b3a3be6",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 outlineStartColor;\nuniform vec4 outlineEndColor;\nuniform vec2 outlineSize;\nuniform vec2 textureSize;\n#endif\nfloat getIsStrokeWithAngel(float cosangel, float sinangel)\n{\n  float stroke = 0.0;\n  float a = texture2D(texture, vec2(v_uv0.x + outlineSize.x * cosangel, v_uv0.y + outlineSize.y * sinangel)).a;\n  float num = 0.01;\n  if (a >= num)\n  {\n      stroke = 1.0;\n  }\n  return stroke;\n}\nfloat easeOutQuint(float x) {\n  return 1.0 - pow(1.0 - x, 5.0);\n}\nvec4 lerp(vec4 color1, vec4 color2, float r){\n  return vec4((color1.rgb * r + color2.rgb * (1.0 - r)),1.0);\n}\nvoid main () {\n  vec4 myC = texture2D(texture, vec2(v_uv0.x, v_uv0.y));\n  float angle = 0.0;\n  float strokeCount = 0.0;\n  float r1 = 0.0;\n  float r2 = 0.0;\n  if(textureSize.y > textureSize.x){\n    r1 = 1.0;\n    r2 = textureSize.x / textureSize.y;\n  } else {\n    r1 = textureSize.y / textureSize.x;\n    r2 = 1.0;\n  }\n  int rang = 360;\n  for(int i = 0; i < 360; i++ ){\n    angle += 1.0 / (float(rang) / 2.0) * 3.14159;\n    vec2 testPoint = vec2(r1 * cos(angle), r2 * sin(angle));\n    strokeCount += getIsStrokeWithAngel(testPoint.x, testPoint.y);\n  }\n  if(strokeCount > 0.0){\n    if(myC.a < 1.0){\n      vec4 outlineColor = lerp(outlineStartColor, outlineEndColor, v_uv0.y);\n      myC.rgb = myC.rgb * myC.a + outlineColor.rgb * (1.0 - myC.a);\n      float r = float(rang);\n      if(strokeCount / r < 0.2){\n        myC.a = easeOutQuint((strokeCount / r) / 0.2 * 3.14159 / 2.0);\n      } else {\n        myC.a = 1.0;\n      }\n    }\n  }\n  gl_FragColor = myC;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform myUniform{\n  vec4 outlineStartColor;\n  vec4 outlineEndColor;\n  vec2 outlineSize;\n  vec2 textureSize;\n};\n#endif\nfloat getIsStrokeWithAngel(float cosangel, float sinangel)\n{\n  float stroke = 0.0;\n  float a = texture2D(texture, vec2(v_uv0.x + outlineSize.x * cosangel, v_uv0.y + outlineSize.y * sinangel)).a;\n  float num = 0.01;\n  if (a >= num)\n  {\n      stroke = 1.0;\n  }\n  return stroke;\n}\nfloat easeOutQuint(float x) {\n  return 1.0 - pow(1.0 - x, 5.0);\n}\nvec4 lerp(vec4 color1, vec4 color2, float r){\n  return vec4((color1.rgb * r + color2.rgb * (1.0 - r)),1.0);\n}\nvoid main () {\n  vec4 myC = texture2D(texture, vec2(v_uv0.x, v_uv0.y));\n  float angle = 0.0;\n  float strokeCount = 0.0;\n  float r1 = 0.0;\n  float r2 = 0.0;\n  if(textureSize.y > textureSize.x){\n    r1 = 1.0;\n    r2 = textureSize.x / textureSize.y;\n  } else {\n    r1 = textureSize.y / textureSize.x;\n    r2 = 1.0;\n  }\n  int rang = 360;\n  for(int i = 0; i < 360; i++ ){\n    angle += 1.0 / (float(rang) / 2.0) * 3.14159;\n    vec2 testPoint = vec2(r1 * cos(angle), r2 * sin(angle));\n    strokeCount += getIsStrokeWithAngel(testPoint.x, testPoint.y);\n  }\n  if(strokeCount > 0.0){\n    if(myC.a < 1.0){\n      vec4 outlineColor = lerp(outlineStartColor, outlineEndColor, v_uv0.y);\n      myC.rgb = myC.rgb * myC.a + outlineColor.rgb * (1.0 - myC.a);\n      float r = float(rang);\n      if(strokeCount / r < 0.2){\n        myC.a = easeOutQuint((strokeCount / r) / 0.2 * 3.14159 / 2.0);\n      } else {\n        myC.a = 1.0;\n      }\n    }\n  }\n  gl_FragColor = myC;\n}"
      }
    }
  ],
  "subMetas": {}
}