// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        fireTexture: { value: white }
        maskTexture: { value: white }
        moveTexture: { value: white }
        startColor: {  value: [1, 1, 1, 1], editor: { type: color } }
        centerColor: {  value: [1, 1, 1, 1], editor: { type: color } }
        endColor: {  value: [1, 1, 1, 1], editor: { type: color } }
        fireThreshold: { value: 0.1 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>
  #include <cc-local>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  #if USE_FIRETEXTURE
  uniform sampler2D fireTexture;
  uniform sampler2D maskTexture;
  uniform sampler2D moveTexture;
  uniform myUniform{
    vec4 startColor;
    vec4 centerColor;
    vec4 endColor;
    float fireThreshold;
  };
  #endif

  vec3 lerp(vec3 a, vec3 b, float t){
    return a + (b - a) * t;
  }
  
  float lerp(float a, float b, float t){
    return a + (b - a) * t;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;
    o.r = 1.0;
    o.g = 0.0;
    o.b = 0.0;
    vec4 fire = vec4(1, 1, 1, 1);
    vec4 _UvDisTile = vec4(1, 1, 1, 1);
    #if USE_FIRETEXTURE
      vec2 f_uv0 = v_uv0;
      f_uv0.y = abs(fract(f_uv0.y + cc_time.x * 0.2));
      f_uv0.x = f_uv0.x + 0.1* (sin(2.0 * f_uv0.y * 3.1415 + cc_time.x));
      vec4 fv = texture(fireTexture, f_uv0);
      vec2 m_uv0 = v_uv0;
      m_uv0.x = abs(fract(m_uv0.x + cc_time.x * 0.1));
      vec4 mv = texture(moveTexture, m_uv0);
      CCTexture(maskTexture, v_uv0, fire);
    #endif
    fv *= 5.0 * fire;
    mv *= 5.0 * fire;
    o.a *= fv.r * mv.r * fireThreshold;


    //写实风格
    /*
    if(o.a >= 0.75){
      o.rgb = startColor.rgb;
    } else if(o.a >= 0.55) {
      o.rgb = startColor.rgb * (o.a - 0.55) / 0.2 + centerColor.rgb * (0.2 - (o.a - 0.55)) / 0.2;
    } else if(o.a >= 0.35) {
      o.rgb = centerColor.rgb;
    } else if(o.a >= 0.15) {
      o.rgb = centerColor.rgb * (o.a - 0.15) / 0.2 + endColor.rgb * (0.2 - (o.a - 0.15)) / 0.2;
    } else {
      o.rgb = endColor.rgb;
    }*/
    
    //卡通风格
    if(o.a >= 1.0){
      o.rgb = startColor.rgb;
      o.a = 1.0;
    } else if(o.a >= 0.3) {
      o.rgb = centerColor.rgb;
      o.a = 1.0;
    } else if(o.a >= 0.1) {
      o.rgb = endColor.rgb;
      o.a = 1.0;
    } else {
      o.a = 0.0;
    }

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
